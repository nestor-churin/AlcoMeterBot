import os
import yaml
import sqlite3
from datetime import datetime
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
with open('config.yml', 'r', encoding='utf-8') as file:
    config = yaml.safe_load(file)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
app = Client(
    "AlcoMeterBot",
    api_id=config['bot']['api_id'],
    api_hash=config['bot']['api_hash'],
    bot_token=config['bot']['bot_token']
)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ –¥–ª—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
os.makedirs(os.path.dirname(config['database']['path']), exist_ok=True)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def init_db():
    conn = sqlite3.connect(config['database']['path'])
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS drinks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            alcohol_type TEXT,
            subtype TEXT,
            volume INTEGER,
            proof REAL,
            video_file_id TEXT,
            status TEXT DEFAULT 'pending',
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –î–æ–¥–∞—î–º–æ —Ç–∞–±–ª–∏—Ü—é –¥–ª—è –ø–æ—Ä—É—à–µ–Ω—å
    c.execute('''
        CREATE TABLE IF NOT EXISTS violations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            violation_type TEXT,
            ban_duration INTEGER,  -- —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –±–∞–Ω—É –≤ –≥–æ–¥–∏–Ω–∞—Ö
            ban_until DATETIME,    -- —á–∞—Å –¥–æ —è–∫–æ–≥–æ –¥—ñ—î –±–∞–Ω
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –æ–±'—î–º—É –≤–∏–ø–∏—Ç–æ–≥–æ
def get_total_volume(user_id):
    conn = sqlite3.connect(config['database']['path'])
    c = conn.cursor()
    c.execute('''
        SELECT 
            SUM(volume) as total_volume,
            SUM(volume * proof / 100) as total_pure_alcohol
        FROM drinks 
        WHERE user_id = ? AND status = 'approved'
    ''', (user_id,))
    result = c.fetchone()
    conn.close()
    return result[0] or 0, result[1] or 0

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –ø—Ä–æ –≤–∏–ø–∏—Ç–µ
def save_drink(user_id, username, alcohol_type, subtype, volume, proof, video_file_id):
    conn = sqlite3.connect(config['database']['path'])
    c = conn.cursor()
    c.execute('''
        INSERT INTO drinks (user_id, username, alcohol_type, subtype, volume, proof, video_file_id)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    ''', (user_id, username, alcohol_type, subtype, volume, proof, video_file_id))
    conn.commit()
    conn.close()

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id):
    return user_id in config['bot']['admin_ids']

# –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–∏ /help
HELP_TEXT = """
üìñ –î–æ–≤—ñ–¥–∫–∞ –ø–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—é AlcoMeterBot:

üéØ –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É
/types - –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç–∏–ø–∏ –∞–ª–∫–æ–≥–æ–ª—é
/top - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
/add - –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å üëà 
/stats - –ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É üìä
/history - –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ üìú
/tos - –ü–æ–∫–∞–∑–∞—Ç–∏ —É–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è

üìù –Ø–∫ –¥–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å:
1. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add
2. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤—ñ–¥–µ–æ-–∫—Ä—É–∂–µ—á–æ–∫ –∑ –¥–æ–∫–∞–∑–æ–º –≤–∏–ø–∏—Ç–æ–≥–æ –∞–ª–∫–æ–≥–æ–ª—é
3. –í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∞–ª–∫–æ–≥–æ–ª—é –∑—ñ —Å–ø–∏—Å–∫—É
4. –í–∏–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ç–∏–ø –∞–ª–∫–æ–≥–æ–ª—é
5. –í–∫–∞–∂—ñ—Ç—å –æ–±'—î–º (–º–æ–∂–Ω–∞ –≤–∏–±—Ä–∞—Ç–∏ –∑—ñ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –∞–±–æ –≤–≤–µ—Å—Ç–∏ —Å–≤—ñ–π)
6. –ß–µ–∫–∞–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞

‚ö†Ô∏è –í–∞–∂–ª–∏–≤–æ:
- –ü—Ä–∏–π–º–∞—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥–µ–æ-–∫—Ä—É–∂–µ—á–∫–∏
- –í—ñ–¥–µ–æ –º–∞—î —á—ñ—Ç–∫–æ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å –≤–∂–∏–≤–∞–Ω–Ω—è
- –û–±'—î–º –≤–∫–∞–∑—É—î—Ç—å—Å—è –≤ –º—ñ–ª—ñ–ª—ñ—Ç—Ä–∞—Ö
- –ù–µ–ø—Ä–∞–≤–¥–∏–≤—ñ –¥–∞–Ω—ñ –±—É–¥—É—Ç—å –≤—ñ–¥—Ö–∏–ª–µ–Ω—ñ
"""

# –¢–µ–∫—Å—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /tos
TOS_TEXT = """
üìú –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è AlcoMeterBot:

1Ô∏è‚É£ –ó–∞–≥–∞–ª—å–Ω—ñ –ø–æ–ª–æ–∂–µ–Ω–Ω—è:
- –ë–æ—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ä–æ–∑–≤–∞–∂–∞–ª—å–Ω–∏—Ö —Ü—ñ–ª–µ–π
- –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –ø–æ–≤–Ω–æ–ª—ñ—Ç–Ω—ñ–º (18+)
- –ë–æ—Ç –Ω–µ –ø—Ä–æ–ø–∞–≥—É—î –Ω–∞–¥–º—ñ—Ä–Ω–µ –≤–∂–∏–≤–∞–Ω–Ω—è –∞–ª–∫–æ–≥–æ–ª—é

2Ô∏è‚É£ –ö–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω—ñ—Å—Ç—å:
- –ú–∏ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–∞–¥–∞–Ω—ñ –≤–∞–º–∏ –¥–∞–Ω—ñ (–Ω—ñ–∫, –≤—ñ–¥–µ–æ, –æ–±'—î–º–∏)
- –í—ñ–¥–µ–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
- –ü—É–±–ª—ñ—á–Ω–æ –ø–æ–∫–∞–∑—É—é—Ç—å—Å—è –ª–∏—à–µ –∑–∞–≥–∞–ª—å–Ω—ñ –æ–±'—î–º–∏ –≤ —Ä–µ–π—Ç–∏–Ω–≥—É

3Ô∏è‚É£ –ü—Ä–∞–≤–∏–ª–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
- –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –Ω–µ–ø—Ä–∞–≤–¥–∏–≤—ñ –¥–∞–Ω—ñ
- –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
- –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ —Å–ø–∞–º–∏—Ç–∏ —Ç–∞ –∑–ª–æ–≤–∂–∏–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º

4Ô∏è‚É£ –í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å:
- –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ—Å–µ –ø–æ–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å –∑–∞ —Å–≤–æ—ó –¥—ñ—ó
- –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—è –º–æ–∂–µ –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ –±—É–¥—å-—è–∫–∏–π –∑–∞–ø–∏—Å
- –ó–∞ –ø–æ—Ä—É—à–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª –º–æ–∂–ª–∏–≤–µ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è

5Ô∏è‚É£ –û–±–º–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç—ñ:
- –ë–æ—Ç –Ω–µ –Ω–µ—Å–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç—ñ –∑–∞ –¥—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
- –ú–∏ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –Ω–∞–¥–º—ñ—Ä–Ω–µ –≤–∂–∏–≤–∞–Ω–Ω—è –∞–ª–∫–æ–≥–æ–ª—é
- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –±–æ—Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ

‚ùóÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –±–æ—Ç–∞, –≤–∏ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—è –∑ —Ü–∏–º–∏ —É–º–æ–≤–∞–º–∏
"""

# –ö–æ–º–∞–Ω–¥–∞ /help
@app.on_message(filters.command("help"))
async def help_command(client, message: Message):
    await message.reply_text(HELP_TEXT)

# –ö–æ–º–∞–Ω–¥–∞ /tos
@app.on_message(filters.command("tos"))
async def tos_command(client, message: Message):
    await message.reply_text(TOS_TEXT)

# –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–∏ /start
@app.on_message(filters.command("start"))
async def start_command(client, message: Message):
    await message.reply_text(
        "üç∫ AlcoMeterBot - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Ç—Ä–µ–∫–µ—Ä –≤–∏–ø–∏—Ç–æ–≥–æ –∞–ª–∫–æ–≥–æ–ª—é!\n\n"
        "üì± –ó–∞–ø–∏—Å—É–π—Ç–µ –∫–æ–∂–µ–Ω –≤–∏–ø–∏—Ç–∏–π –Ω–∞–ø—ñ–π —á–µ—Ä–µ–∑ –≤—ñ–¥–µ–æ-–∫—Ä—É–∂–µ—á–æ–∫, "
        "–≤—ñ–¥—Å—Ç–µ–∂—É–π—Ç–µ —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞ –∑–º–∞–≥–∞–π—Ç–µ—Å—è –∑ –¥—Ä—É–∑—è–º–∏.\n\n"
        "üéØ –ì–æ–ª–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/add - –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å\n"
        "/stats - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/top - –†–µ–π—Ç–∏–Ω–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n\n"
        "‚ùì –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: /help"
    )
# –î–æ–¥–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@app.on_message(filters.command("stats"))
async def stats_command(client, message):
    await message.reply_text("‚öôÔ∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ. –°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏!")
    user_id = message.from_user.id

    conn = sqlite3.connect(config['database']['path'])
    c = conn.cursor()
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    c.execute('''
        SELECT 
            COUNT(*) as total_records,
            COALESCE(SUM(CASE WHEN status = 'approved' THEN volume ELSE 0 END), 0) as total_volume,
            COALESCE(SUM(CASE WHEN status = 'approved' THEN volume * proof / 100 ELSE 0 END), 0) as total_pure_alcohol
        FROM drinks
        WHERE user_id = ?
    ''', (user_id,))
    stats = c.fetchone() or (0, 0, 0)
    
    c.execute('''
        SELECT 
            alcohol_type,
            COUNT(*) as count,
            COALESCE(SUM(CASE WHEN status = 'approved' THEN volume ELSE 0 END), 0) as volume
        FROM drinks
        WHERE user_id = ?
        GROUP BY alcohol_type
        ORDER BY volume DESC
    ''', (user_id,))
    types_stats = c.fetchall()
    
    conn.close()
    
    text = "üìä –í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
    text += f"üìù –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤: {stats[0]}\n"
    
    total_volume = stats[1]
    total_pure = stats[2]
    
    liters = total_volume // 1000
    ml = total_volume % 1000
    volume_text = f"{liters}–ª {ml}–º–ª" if liters > 0 else f"{ml}–º–ª"
    
    text += f"ü•É –ó–∞–≥–∞–ª—å–Ω–∏–π –æ–±'—î–º: {volume_text}\n"
    text += f"üí™ –ß–∏—Å—Ç–æ–≥–æ —Å–ø–∏—Ä—Ç—É: {total_pure:.1f}–º–ª\n\n"
    
    if types_stats:
        text += "üç∑ –ü–æ —Ç–∏–ø–∞–º –Ω–∞–ø–æ—ó–≤:\n"
        for type_name, count, volume in types_stats:
            if volume:
                liters = volume // 1000
                ml = volume % 1000
                volume_text = f"{liters}–ª {ml}–º–ª" if liters > 0 else f"{ml}–º–ª"
                text += f"- {config['alcohol_types'].get(type_name, {}).get('name', type_name)}: {volume_text} ({count} –∑–∞–ø–∏—Å—ñ–≤)\n"
    else:
        text += "üîπ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤. –î–æ–¥–∞–π—Ç–µ —Å–≤—ñ–π –ø–µ—Ä—à–∏–π –∑–∞–ø–∏—Å!"
    
    await message.reply_text(text)

# –î–æ–¥–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–ø–∏—Å—ñ–≤
@app.on_message(filters.command("history"))
async def history_command(client, message: Message):
    user_id = message.from_user.id
    
    conn = sqlite3.connect(config['database']['path'])
    c = conn.cursor()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 10 –∑–∞–ø–∏—Å—ñ–≤
    c.execute('''
        SELECT 
            alcohol_type,
            subtype,
            volume,
            proof,
            status,
            timestamp
        FROM drinks
        WHERE user_id = ?
        ORDER BY timestamp DESC
        LIMIT 10
    ''', (user_id,))
    history = c.fetchall()
    conn.close()
    
    if not history:
        await message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤.")
        return
    
    text = "üìú –û—Å—Ç–∞–Ω–Ω—ñ 10 –∑–∞–ø–∏—Å—ñ–≤:\n\n"
    for alcohol_type, subtype, volume, proof, status, timestamp in history:
        dt = datetime.fromisoformat(timestamp)
        formatted_date = dt.strftime("%d.%m.%Y %H:%M")
        
        status_emoji = {
            'pending': '‚è≥',
            'approved': '‚úÖ',
            'rejected': '‚ùå'
        }.get(status, '‚ùì')
        
        text += f"{formatted_date}\n"
        text += f"{status_emoji} {config['alcohol_types'][alcohol_type]['name']} ({subtype})\n"
        text += f"‚îî {volume}–º–ª, {proof}%\n\n"
    
    await message.reply_text(text)
# –ö–æ–º–∞–Ω–¥–∞ /types
@app.on_message(filters.command("types"))
async def types_command(client, message: Message):
    text = "üìã –î–æ—Å—Ç—É–ø–Ω—ñ —Ç–∏–ø–∏ –∞–ª–∫–æ–≥–æ–ª—é:\n\n"
    for alcohol_id, details in config['alcohol_types'].items():
        text += f"üç∑ {details['name']} ({details['strength']}%)\n"
        text += f"‚îî –ü—ñ–¥—Ç–∏–ø–∏: {', '.join(details['subtypes'])}\n"
    await message.reply_text(text)

# –ö–æ–º–∞–Ω–¥–∞ /top
@app.on_message(filters.command("top"))
async def top_command(client, message: Message):
    conn = sqlite3.connect(config['database']['path'])
    c = conn.cursor()
    c.execute('''
        SELECT 
            user_id,
            username,
            SUM(volume) as total_volume,
            SUM(volume * proof / 100) as total_pure_alcohol
        FROM drinks 
        WHERE status = 'approved'
        GROUP BY user_id
        ORDER BY total_pure_alcohol DESC
        LIMIT 10
    ''')
    results = c.fetchall()
    conn.close()

    if not results:
        await message.reply_text("üìä –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
        return

    text = "üèÜ –¢–æ–ø-10 –ø–æ –≤–∏–ø–∏—Ç–æ–º—É:\n\n"
    for i, (user_id, username, volume, pure_alcohol) in enumerate(results, 1):
        liters = volume // 1000
        ml = volume % 1000
        volume_text = f"{liters}–ª {ml}–º–ª" if liters > 0 else f"{ml}–º–ª"
        text += f"{i}. {username}: {volume_text} (—á–∏—Å—Ç–æ–≥–æ —Å–ø–∏—Ä—Ç—É: {pure_alcohol:.1f}–º–ª)\n"

    await message.reply_text(text)

# –ö–æ–º–∞–Ω–¥–∞ /add –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É
@app.on_message(filters.command("add"))
async def add_command(client, message: Message):
    user_id = message.from_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞–±–∞–Ω–µ–Ω–∏–π
    ban_until = is_user_banned(user_id)
    if ban_until:
        await message.reply_text(
            f"‚ùå –í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –¥–æ {ban_until.strftime('%d.%m.%Y %H:%M')}!\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –Ω–µ –¥–æ–¥–∞—î –∑–∞–ø–∏—Å
    if hasattr(app, 'temp_data') and user_id in app.temp_data:
        await message.reply_text(
            "‚ùå –£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å—ñ—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–µ—Ä—à—ñ—Ç—å —ó—ó –∞–±–æ –ø–æ—á–µ–∫–∞–π—Ç–µ 5 —Ö–≤–∏–ª–∏–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å–∫–∏–¥–∞–Ω–Ω—è."
        )
        return
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ
    if not hasattr(app, 'temp_data'):
        app.temp_data = {}
    
    app.temp_data[user_id] = {
        'waiting_for_video': True,
        'user_id': user_id,
        'username': message.from_user.username or message.from_user.first_name
    }
    
    await message.reply_text(
        "üé• –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤—ñ–¥–µ–æ-–∫—Ä—É–∂–µ—á–æ–∫ –∑ –¥–æ–∫–∞–∑–æ–º –≤–∏–ø–∏—Ç–æ–≥–æ –∞–ª–∫–æ–≥–æ–ª—é.\n"
        "‚ö†Ô∏è –ü—Ä–∏–π–º–∞—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥–µ–æ-–∫—Ä—É–∂–µ—á–∫–∏!\n"
        "‚ö†Ô∏è –í—ñ–¥–µ–æ –º–∞—î —á—ñ—Ç–∫–æ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å –≤–∂–∏–≤–∞–Ω–Ω—è!"
    )

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ø–∞—É–∑–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–¥–º—ñ–Ω–∞
if not hasattr(app, 'admin_paused'):
    app.admin_paused = set()

# –ö–æ–º–∞–Ω–¥–∞ /requests –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
@app.on_message(filters.command("requests"))
async def requests_command(client, message: Message):
    if not is_admin(message.from_user.id):
        await message.reply_text("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        return
        
    conn = sqlite3.connect(config['database']['path'])
    c = conn.cursor()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ pending –∑–∞—è–≤–∫–∏
    c.execute('''
        SELECT 
            id,
            user_id,
            username,
            alcohol_type,
            subtype,
            volume,
            proof,
            video_file_id,
            timestamp
        FROM drinks
        WHERE status = 'pending'
        ORDER BY timestamp DESC
    ''')
    pending_requests = c.fetchall()
    conn.close()
    
    if not pending_requests:
        pause_button = InlineKeyboardButton(
            "‚è∏Ô∏è –ü—Ä–∏–∑—É–ø–∏–Ω–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è" if message.from_user.id not in app.admin_paused else "‚ñ∂Ô∏è –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è",
            callback_data="toggle_pause"
        )
        await message.reply_text(
            "üì≠ –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥.",
            reply_markup=InlineKeyboardMarkup([[pause_button]])
        )
        return
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–∂–Ω—É –∑–∞—è–≤–∫—É –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
    for request in pending_requests:
        (req_id, user_id, username, alcohol_type, subtype, volume, proof, video_id, timestamp) = request
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É
        dt = datetime.fromisoformat(timestamp)
        formatted_date = dt.strftime("%d.%m.%Y %H:%M")
        
        try:
            # –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –≤—ñ–¥–µ–æ-–∫—Ä—É–∂–µ—á–æ–∫
            await client.send_video_note(
                chat_id=message.chat.id,
                video_note=video_id
            )
            
            # –ü–æ—Ç—ñ–º –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
            await client.send_message(
                chat_id=message.chat.id,
                text=(
                    f"üìù –ó–∞—è–≤–∫–∞ #{req_id}\n"
                    f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
                    f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {username}\n"
                    f"üç∑ –¢–∏–ø: {config['alcohol_types'][alcohol_type]['name']}\n"
                    f"üìù –ü—ñ–¥—Ç–∏–ø: {subtype}\n"
                    f"üî¢ –û–±'—î–º: {volume}–º–ª\n"
                    f"üí™ –ú—ñ—Ü–Ω—ñ—Å—Ç—å: {proof}%"
                ),
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"approve_{user_id}_{volume}"),
                        InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{user_id}_{volume}")
                    ]
                ])
            )
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–µ–æ –¥–ª—è –∑–∞—è–≤–∫–∏ #{req_id}: {e}")
            continue
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø–∞—É–∑–∏/–≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
    pause_button = InlineKeyboardButton(
        "‚è∏Ô∏è –ü—Ä–∏–∑—É–ø–∏–Ω–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è" if message.from_user.id not in app.admin_paused else "‚ñ∂Ô∏è –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è",
        callback_data="toggle_pause"
    )
    await message.reply_text(
        f"üìã –í—Å—å–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞—è–≤–æ–∫: {len(pending_requests)}",
        reply_markup=InlineKeyboardMarkup([[pause_button]])
    )

# –û–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–∫—É callback-–∫–Ω–æ–ø–æ–∫
@app.on_callback_query()
async def handle_callback(client: Client, callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data
    
    # –û–±—Ä–æ–±–∫–∞ –ø–∞—É–∑–∏/–≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
    if data == "toggle_pause" and is_admin(user_id):
        if user_id in app.admin_paused:
            app.admin_paused.remove(user_id)
            await callback_query.message.edit_text(
                callback_query.message.text + "\n\n‚ñ∂Ô∏è –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ!",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚è∏Ô∏è –ü—Ä–∏–∑—É–ø–∏–Ω–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", callback_data="toggle_pause")
                ]])
            )
        else:
            app.admin_paused.add(user_id)
            await callback_query.message.edit_text(
                callback_query.message.text + "\n\n‚è∏Ô∏è –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ!",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚ñ∂Ô∏è –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", callback_data="toggle_pause")
                ]])
            )
        return
    
    # –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è/–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if data.startswith(('approve_', 'reject_')):
        if not is_admin(user_id):
            await callback_query.answer("‚ùå –¶—è –¥—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!", show_alert=True)
            return
            
        # –û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
        action, target_user_id, volume = data.split('_')
        target_user_id = int(target_user_id)
        volume = int(volume)
        
        conn = sqlite3.connect(config['database']['path'])
        c = conn.cursor()
        
        if action == 'approve':
            # –°–ø–æ—á–∞—Ç–∫—É –∑–Ω–∞—Ö–æ–¥–∏–º–æ ID –∑–∞–ø–∏—Å—É
            c.execute('''
                SELECT id FROM drinks 
                WHERE user_id = ? AND volume = ? AND status = 'pending'
                ORDER BY id DESC LIMIT 1
            ''', (target_user_id, volume))
            
            result = c.fetchone()
            if result:
                record_id = result[0]
                # –¢–µ–ø–µ—Ä –æ–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –∑–∞–ø–∏—Å
                c.execute('''
                    UPDATE drinks 
                    SET status = 'approved' 
                    WHERE id = ?
                ''', (record_id,))
                
                if c.rowcount > 0:
                    await callback_query.message.edit_text(
                        callback_query.message.text + "\n\n‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!"
                    )
                    
                    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    try:
                        await client.send_message(
                            chat_id=target_user_id,
                            text="üéâ –í–∞—à –∑–∞–ø–∏—Å –±—É–ª–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!"
                        )
                    except Exception:
                        pass
            
        else:  # reject
            # –°–ø–æ—á–∞—Ç–∫—É –∑–Ω–∞—Ö–æ–¥–∏–º–æ ID –∑–∞–ø–∏—Å—É
            c.execute('''
                SELECT id, username FROM drinks 
                WHERE user_id = ? AND volume = ? AND status = 'pending'
                ORDER BY id DESC LIMIT 1
            ''', (target_user_id, volume))
            
            result = c.fetchone()
            if result:
                record_id, username = result
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å—É
                c.execute('''
                    UPDATE drinks 
                    SET status = 'rejected' 
                    WHERE id = ?
                ''', (record_id,))
                
                if c.rowcount > 0:
                    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Ä—É—à–µ–Ω–Ω—è
                    rejected_count, next_ban_duration = get_user_info(target_user_id)
                    
                    # –Ø–∫—â–æ —Ü–µ –Ω–µ –ø–µ—Ä—à–µ –ø–æ—Ä—É—à–µ–Ω–Ω—è, –±–∞–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    ban_info = ""
                    if rejected_count >= 3:
                        ban_until = ban_user(target_user_id, username, next_ban_duration)
                        ban_info = f"\n\nüö´ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –¥–æ {ban_until.strftime('%d.%m.%Y %H:%M')}"
                    
                    await callback_query.message.edit_text(
                        callback_query.message.text + f"\n\n‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ!\nüìä –í—Å—å–æ–≥–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω—å: {rejected_count}{ban_info}"
                    )
                    
                    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    try:
                        message = "‚ùå –í–∞—à –∑–∞–ø–∏—Å –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                        if ban_info:
                            message += f"\n{ban_info}"
                        await client.send_message(
                            chat_id=target_user_id,
                            text=message
                        )
                    except Exception:
                        pass
        
        conn.commit()
        conn.close()
        return
        
    # –û–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö callback-–∫–Ω–æ–ø–æ–∫ (–≤–∏–±—ñ—Ä —Ç–∏–ø—É, –ø—ñ–¥—Ç–∏–ø—É, –æ–±'—î–º—É)
    if not hasattr(app, 'temp_data') or user_id not in app.temp_data:
        await callback_query.answer("‚ùå –°–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤—ñ–¥–µ–æ –∑–Ω–æ–≤—É.", show_alert=True)
        return
    
    # –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –∞–ª–∫–æ–≥–æ–ª—é
    if data.startswith('alcohol_'):
        alcohol_type = data.split('_')[1]
        app.temp_data[user_id]['alcohol_type'] = alcohol_type
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –ø—ñ–¥—Ç–∏–ø–∞–º–∏
        keyboard = []
        row = []
        for subtype in config['alcohol_types'][alcohol_type]['subtypes']:
            if len(row) == 2:
                keyboard.append(row)
                row = []
            row.append(InlineKeyboardButton(
                subtype,
                callback_data=f"subtype_{alcohol_type}_{subtype}"
            ))
        if row:
            keyboard.append(row)
            
        await callback_query.message.edit_text(
            f"ü•É –í–∏–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ç–∏–ø {config['alcohol_types'][alcohol_type]['name']}:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    # –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø—ñ–¥—Ç–∏–ø—É
    elif data.startswith('subtype_'):
        _, alcohol_type, subtype = data.split('_')
        app.temp_data[user_id]['subtype'] = subtype
        app.temp_data[user_id]['proof'] = config['alcohol_types'][alcohol_type]['strength']
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –æ–±'—î–º—É
        default_volume = config['alcohol_types'][alcohol_type]['default_volume']
        keyboard = [
            [
                InlineKeyboardButton(f"{default_volume}–º–ª", callback_data=f"volume_{default_volume}"),
                InlineKeyboardButton(f"{default_volume*2}–º–ª", callback_data=f"volume_{default_volume*2}")
            ],
            [
                InlineKeyboardButton("–Ü–Ω—à–∏–π –æ–±'—î–º", callback_data="volume_custom")
            ]
        ]
        
        await callback_query.message.edit_text(
            "üî¢ –í–∏–±–µ—Ä—ñ—Ç—å –æ–±'—î–º –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    # –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –æ–±'—î–º—É
    elif data.startswith('volume_'):
        volume = data.split('_')[1]
        
        if volume == 'custom':
            await callback_query.message.edit_text(
                "üìù –í–≤–µ–¥—ñ—Ç—å –æ–±'—î–º –≤ –º—ñ–ª—ñ–ª—ñ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 750):"
            )
            app.temp_data[user_id]['waiting_for_volume'] = True
        else:
            volume = int(volume)
            app.temp_data[user_id]['volume'] = volume
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–ø–∏—Å
            save_drink(
                user_id=app.temp_data[user_id]['user_id'],
                username=app.temp_data[user_id]['username'],
                alcohol_type=app.temp_data[user_id]['alcohol_type'],
                subtype=app.temp_data[user_id]['subtype'],
                volume=volume,
                proof=app.temp_data[user_id]['proof'],
                video_file_id=app.temp_data[user_id]['file_id']
            )
            
            await callback_query.message.edit_text(
                "‚úÖ –ó–∞–ø–∏—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É!\n"
                f"–¢–∏–ø: {config['alcohol_types'][app.temp_data[user_id]['alcohol_type']]['name']}\n"
                f"–ü—ñ–¥—Ç–∏–ø: {app.temp_data[user_id]['subtype']}\n"
                f"–û–±'—î–º: {volume}–º–ª\n"
                f"–ú—ñ—Ü–Ω—ñ—Å—Ç—å: {app.temp_data[user_id]['proof']}%"
            )
            
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞–º
            for admin_id in config['bot']['admin_ids']:
                await send_video_to_admin(
                    client,
                    admin_id,
                    app.temp_data[user_id],
                    app.temp_data[user_id].get('is_video_note', True)
                )
            
            # –û—á–∏—â–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ
            del app.temp_data[user_id]

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ –æ–±'—î–º—É
@app.on_message(filters.text & filters.private)
async def handle_text(client: Client, message: Message):
    user_id = message.from_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ –ø—Ä–æ—Ü–µ—Å—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±'—î–º—É
    if hasattr(app, 'temp_data') and user_id in app.temp_data and app.temp_data[user_id].get('waiting_for_volume'):
        try:
            volume = int(message.text)
            if volume <= 0:
                raise ValueError
                
            app.temp_data[user_id]['volume'] = volume
            app.temp_data[user_id]['waiting_for_volume'] = False
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–ø–∏—Å
            save_drink(
                user_id=app.temp_data[user_id]['user_id'],
                username=app.temp_data[user_id]['username'],
                alcohol_type=app.temp_data[user_id]['alcohol_type'],
                subtype=app.temp_data[user_id]['subtype'],
                volume=volume,
                proof=app.temp_data[user_id]['proof'],
                video_file_id=app.temp_data[user_id]['file_id']
            )
            
            await message.reply_text(
                "‚úÖ –ó–∞–ø–∏—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É!\n"
                f"–¢–∏–ø: {config['alcohol_types'][app.temp_data[user_id]['alcohol_type']]['name']}\n"
                f"–ü—ñ–¥—Ç–∏–ø: {app.temp_data[user_id]['subtype']}\n"
                f"–û–±'—î–º: {volume}–º–ª\n"
                f"–ú—ñ—Ü–Ω—ñ—Å—Ç—å: {app.temp_data[user_id]['proof']}%"
            )
            
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞–º
            for admin_id in config['bot']['admin_ids']:
                await send_video_to_admin(
                    client,
                    admin_id,
                    app.temp_data[user_id],
                    app.temp_data[user_id].get('is_video_note', True)
                )
            
            # –û—á–∏—â–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ
            del app.temp_data[user_id]
            
        except ValueError:
            await message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –≤ –º—ñ–ª—ñ–ª—ñ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 750)")
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ –ø—Ä–æ—Ü–µ—Å—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó
    if hasattr(app, 'suggest_data') and user_id in app.suggest_data:
        suggest_data = app.suggest_data[user_id]
        
        if suggest_data['step'] == 'name':
            suggest_data['name'] = message.text
            suggest_data['step'] = 'strength'
            await message.reply_text(
                "2Ô∏è‚É£ –í–≤–µ–¥—ñ—Ç—å –º—ñ—Ü–Ω—ñ—Å—Ç—å –Ω–∞–ø–æ—é —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 40):"
            )
            
        elif suggest_data['step'] == 'strength':
            try:
                strength = float(message.text)
                if strength <= 0 or strength > 100:
                    raise ValueError
                
                suggest_data['strength'] = strength
                suggest_data['step'] = 'subtypes'
                await message.reply_text(
                    "3Ô∏è‚É£ –í–≤–µ–¥—ñ—Ç—å –ø—ñ–¥—Ç–∏–ø–∏ –Ω–∞–ø–æ—é —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –°–≤—ñ—Ç–ª–µ, –¢–µ–º–Ω–µ, –ù–µ—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–µ):"
                )
                
            except ValueError:
                await message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 100.")
                
        elif suggest_data['step'] == 'subtypes':
            subtypes = [s.strip() for s in message.text.split(',')]
            suggest_data['subtypes'] = ','.join(subtypes)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é
            conn = sqlite3.connect(config['database']['path'])
            c = conn.cursor()
            c.execute('''
                INSERT INTO alcohol_suggestions (user_id, username, name, strength, subtypes)
                VALUES (?, ?, ?, ?, ?)
            ''', (user_id, suggest_data['username'], suggest_data['name'], 
                  suggest_data['strength'], suggest_data['subtypes']))
            conn.commit()
            conn.close()
            
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            for admin_id in config['bot']['admin_ids']:
                try:
                    await client.send_message(
                        chat_id=admin_id,
                        text=(
                            "üÜï –ù–æ–≤–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è —Ç–∏–ø—É –∞–ª–∫–æ–≥–æ–ª—é!\n\n"
                            f"üë§ –í—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {suggest_data['username']}\n"
                            f"üç∑ –ù–∞–∑–≤–∞: {suggest_data['name']}\n"
                            f"üí™ –ú—ñ—Ü–Ω—ñ—Å—Ç—å: {suggest_data['strength']}%\n"
                            f"üìù –ü—ñ–¥—Ç–∏–ø–∏: {suggest_data['subtypes']}"
                        ),
                        reply_markup=InlineKeyboardMarkup([
                            [
                                InlineKeyboardButton("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏", 
                                    callback_data=f"approve_suggest_{user_id}_{len(subtypes)}"),
                                InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", 
                                    callback_data=f"reject_suggest_{user_id}_{len(subtypes)}")
                            ]
                        ])
                    )
                except Exception as e:
                    print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –∞–¥–º—ñ–Ω—É {admin_id}: {e}")
            
            await message.reply_text(
                "‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é! –í–æ–Ω–∞ –±—É–¥–µ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏."
            )
            
            # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó
            del app.suggest_data[user_id]
# –û–Ω–æ–≤–ª—é—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–µ–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
async def send_video_to_admin(client, admin_id, user_data, is_video_note=True):
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∞–¥–º—ñ–Ω –Ω–µ –Ω–∞ –ø–∞—É–∑—ñ
    if admin_id in app.admin_paused:
        return
        
    try:
        # –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –≤—ñ–¥–µ–æ-–∫—Ä—É–∂–µ—á–æ–∫
        await client.send_video_note(
            chat_id=admin_id,
            video_note=user_data['file_id']
        )
        
        # –ü–æ—Ç—ñ–º –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
        await client.send_message(
            chat_id=admin_id,
            text=(
                "üÜï –ù–æ–≤–∏–π –∑–∞–ø–∏—Å –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è!\n"
                f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_data['username']}\n"
                f"üç∑ –¢–∏–ø: {config['alcohol_types'][user_data['alcohol_type']]['name']}\n"
                f"üìù –ü—ñ–¥—Ç–∏–ø: {user_data['subtype']}\n"
                f"üî¢ –û–±'—î–º: {user_data['volume']}–º–ª\n"
                f"üí™ –ú—ñ—Ü–Ω—ñ—Å—Ç—å: {user_data['proof']}%"
            ),
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"approve_{user_data['user_id']}_{user_data['volume']}"),
                    InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{user_data['user_id']}_{user_data['volume']}")
                ]
            ])
        )
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤—ñ–¥–µ–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

# –û–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–∫—É –≤—ñ–¥–µ–æ
@app.on_message(filters.video_note)
async def handle_video(client, message: Message):
    user_id = message.from_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ –ø—Ä–æ—Ü–µ—Å—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É
    if not hasattr(app, 'temp_data') or user_id not in app.temp_data or not app.temp_data[user_id].get('waiting_for_video'):
        await message.reply_text(
            "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add –¥–ª—è –ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É."
        )
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ file_id –≤—ñ–¥–µ–æ
    app.temp_data[user_id]['file_id'] = message.video_note.file_id
    app.temp_data[user_id]['waiting_for_video'] = False
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —Ç–∏–ø–∞–º–∏ –∞–ª–∫–æ–≥–æ–ª—é
    keyboard = []
    row = []
    for alcohol_id, details in config['alcohol_types'].items():
        if len(row) == 2:
            keyboard.append(row)
            row = []
        row.append(InlineKeyboardButton(
            details['name'],
            callback_data=f"alcohol_{alcohol_id}"
        ))
    if row:
        keyboard.append(row)

    await message.reply_text(
        "üç∑ –í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∞–ª–∫–æ–≥–æ–ª—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –≤—ñ–¥–µ–æ
@app.on_message(filters.video)
async def handle_regular_video(client, message: Message):
    user_id = message.from_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ –ø—Ä–æ—Ü–µ—Å—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É
    if not hasattr(app, 'temp_data') or user_id not in app.temp_data or not app.temp_data[user_id].get('waiting_for_video'):
        return
    
    await message.reply_text(
        "‚ùå –í–∏–±–∞—á—Ç–µ, –∞–ª–µ –ø—Ä–∏–π–º–∞—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥–µ–æ-–∫—Ä—É–∂–µ—á–∫–∏.\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à–µ –≤—ñ–¥–µ–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ –≤—ñ–¥–µ–æ-–∫—Ä—É–∂–µ—á–∫–∞."
    )

# –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø–æ—Ä—É—à–µ–Ω–Ω—è–º–∏
def get_user_violations(user_id):
    conn = sqlite3.connect(config['database']['path'])
    c = conn.cursor()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥—Ö–∏–ª–µ–Ω–∏—Ö –∑–∞—è–≤–æ–∫
    c.execute('''
        SELECT COUNT(*) 
        FROM drinks 
        WHERE user_id = ? AND status = 'rejected'
    ''', (user_id,))
    rejected_count = c.fetchone()[0]
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –±–∞–Ω—ñ–≤
    c.execute('''
        SELECT violation_type, ban_duration, ban_until, timestamp
        FROM violations
        WHERE user_id = ?
        ORDER BY timestamp DESC
    ''', (user_id,))
    violations = c.fetchall()
    
    conn.close()
    return rejected_count, violations

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def ban_user(user_id, username, duration_hours):
    conn = sqlite3.connect(config['database']['path'])
    c = conn.cursor()
    
    ban_until = datetime.now().replace(microsecond=0)
    ban_until = ban_until.replace(hour=ban_until.hour + duration_hours)
    
    c.execute('''
        INSERT INTO violations (user_id, username, violation_type, ban_duration, ban_until)
        VALUES (?, ?, ?, ?, ?)
    ''', (user_id, username, 'rejection_ban', duration_hours, ban_until))
    
    conn.commit()
    conn.close()
    return ban_until

# –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–∞–Ω–µ–Ω–∏–π
def is_user_banned(user_id):
    conn = sqlite3.connect(config['database']['path'])
    c = conn.cursor()
    
    c.execute('''
        SELECT ban_until
        FROM violations
        WHERE user_id = ? AND ban_until > datetime('now')
        ORDER BY ban_until DESC
        LIMIT 1
    ''', (user_id,))
    
    result = c.fetchone()
    conn.close()
    
    if result:
        return datetime.fromisoformat(result[0])
    return None

# –û–Ω–æ–≤–ª—é—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def get_user_info(user_id):
    rejected_count, violations = get_user_violations(user_id)
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–Ω—É
    if rejected_count == 0:
        next_ban_duration = 72  # 3 –¥–Ω—ñ –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –ø–æ—Ä—É—à–µ–Ω–Ω—è
    else:
        last_ban = violations[0][1] if violations else 72
        if rejected_count > len(violations) * 2:
            next_ban_duration = min(last_ban * 2, 720)  # –ú–∞–∫—Å–∏–º—É–º 30 –¥–Ω—ñ–≤
        else:
            next_ban_duration = max(72, last_ban // 2)  # –ó–º–µ–Ω—à—É—î–º–æ –ø–æ–∫–∞—Ä–∞–Ω–Ω—è
            
    return rejected_count, next_ban_duration



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    init_db()
    print("AlcoMeterBot –∑–∞–ø—É—â–µ–Ω–æ!")
    app.run()